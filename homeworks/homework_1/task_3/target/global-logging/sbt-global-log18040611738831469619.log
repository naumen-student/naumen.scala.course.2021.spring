[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\danil\AppData\Local\Temp\idea2.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\danil\AppData\Local\Temp\idea2.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.7 (AdoptOpenJDK Java 15.0.2)
[debug]       Load.loadUnit: plugins took 43.3319ms
[debug]       Load.loadUnit: defsScala took 0.1423ms
[debug] [Loading] Scanning directory C:\Users\danil\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\danil\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 10.082 ms
[debug]           Load.resolveProject(global-plugins) took 23.8184ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\danil\.sbt\1.0\plugins, plugins: List(<none>))) took 45.6294ms
[debug] [Loading] Done in C:\Users\danil\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 56.1134ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1234ms
[debug]     Load.loadUnit(file:/C:/Users/danil/.sbt/1.0/plugins/, ...) took 104.3761ms
[debug]   Load.apply: load took 188.9148ms
[debug]   Load.apply: resolveProjects took 3.0606ms
[debug]   Load.apply: finalTransforms took 28.5692ms
[debug]   Load.apply: config.delegates took 3.7414ms
[debug]   Load.apply: Def.make(settings)... took 382.541ms
[debug]   Load.apply: structureIndex took 56.8749ms
[debug]   Load.apply: mkStreams took 0.9358ms
[info] loading global plugins from C:\Users\danil\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1397.9677ms
[debug]           Load.loadUnit: plugins took 13.3735ms
[debug]           Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory E:\idea_projects\naumen_task1\project
[debug]             Load.loadUnit: mkEval took 3.352ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\idea_projects\naumen_task1\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.1201 ms
[info] loading settings for project naumen_task1-build from plugins.sbt,idea2.sbt ...
[debug]               Load.resolveProject(naumen_task1-build) took 1.5616ms
[debug]             Load.loadTransitive: finalizeProject(Project(id naumen_task1-build, base: E:\idea_projects\naumen_task1\project, plugins: List(<none>))) took 2.9864ms
[debug] [Loading] Done in E:\idea_projects\naumen_task1\project, returning: (naumen_task1-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 75.0048ms
[debug]           Load.loadUnit: cleanEvalClasses took 2.9272ms
[debug]         Load.loadUnit(file:/E:/idea_projects/naumen_task1/project/, ...) took 91.7965ms
[debug]       Load.apply: load took 92.584ms
[debug]       Load.apply: resolveProjects took 0.0604ms
[debug]       Load.apply: finalTransforms took 5.6117ms
[debug]       Load.apply: config.delegates took 0.2118ms
[debug]       Load.apply: Def.make(settings)... took 42.5813ms
[debug]       Load.apply: structureIndex took 22.7302ms
[debug]       Load.apply: mkStreams took 0.0024ms
[info] loading project definition from E:\idea_projects\naumen_task1\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 290.0184ms
[debug]     Load.loadUnit: defsScala took 0.0017ms
[debug] [Loading] Scanning directory E:\idea_projects\naumen_task1
[debug]       Load.loadUnit: mkEval took 0.1075ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\idea_projects\naumen_task1, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbtide.ConfigPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.3907 ms
[info] loading settings for project naumen_task1 from build.sbt ...
[debug]         Load.resolveProject(naumen_task1) took 14.003ms
[debug]       Load.loadTransitive: finalizeProject(Project(id naumen_task1, base: E:\idea_projects\naumen_task1, plugins: List(<none>))) took 15.9723ms
[debug] [Loading] Done in E:\idea_projects\naumen_task1, returning: (naumen_task1)
[debug]     Load.loadUnit: loadedProjectsRaw took 37.6782ms
[debug]     Load.loadUnit: cleanEvalClasses took 3.1413ms
[debug]   Load.loadUnit(file:/E:/idea_projects/naumen_task1/, ...) took 331.3007ms
[debug] Load.apply: load took 332.2086ms
[debug] Load.apply: resolveProjects took 0.0875ms
[debug] Load.apply: finalTransforms took 13.3972ms
[debug] Load.apply: config.delegates took 0.2107ms
[debug] Load.apply: Def.make(settings)... took 30.9197ms
[debug] Load.apply: structureIndex took 13.9968ms
[debug] Load.apply: mkStreams took 0.0018ms
[info] set current project to naumen_task1 (in build file:/E:/idea_projects/naumen_task1/)
[warn] there's a key that's not used by any other settings/tasks:
[warn]  
[warn] * naumen_task1 / idePackagePrefix
[warn]   +- E:\idea_projects\naumen_task1\build.sbt:7
[warn]  
[warn] note: a setting might still be used by a command; to exclude a key from this `lintUnused` check
[warn] either append it to `Global / excludeLintKeys` or call .withRank(KeyRanks.Invisible) on the key
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 60074 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 60074, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to naumen_task1 (in build file:/E:/idea_projects/naumen_task1/)
[debug] > Exec(idea-shell, None, None)
